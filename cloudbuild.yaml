steps:
# [START project-init]
- id: 'Project Init'
  name: gcr.io/cloud-builders/gcloud
  entrypoint: sh
  args:
    - '-c'
    - |
      echo "***********************"
      echo "Project ID        : $_PROJECT_ID"
      echo "Branch            : $_BRANCH_NAME"
      echo "Dry Run           : ${_APPLY_CHANGES}"
      echo "Subfolder         : ${_SUBFOLDER}"
      echo "***********************"
      chmod +x ./scripts/init.sh
      ./scripts/init.sh ${_PROJECT_ID} ${_SUBFOLDER}
# [END project-init]

# [START tf-init]
- id: 'Terraform Init'
  name: 'hashicorp/terraform:1.8.0'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      cd $_SUBFOLDER
      echo "***********************"
      echo "Initializing Terraform in $_SUBFOLDER directory..."
      terraform init -input=false -no-color -upgrade -backend-config=init/backend.tfvars
# [END tf-init]

# [START tf-plan]
- id: 'Terraform Plan'
  name: 'hashicorp/terraform:1.8.0'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      cd $_SUBFOLDER
      echo "***********************"
      echo "Creating Terraform plan in $_SUBFOLDER directory..."
      pwd
      ls -la
      ls config -la
      terraform plan -out changes.tfplan -var-file=config/variable.tfvars
# [END tf-plan]

# [START tf-apply]
- id: 'Terraform Apply'
  name: 'hashicorp/terraform:1.8.0'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      if [ "${_APPLY_CHANGES}" == "true" ]; then
        cd $_SUBFOLDER
        echo "***********************"
        echo "Applying Terraform changes..."
        terraform apply -input=false -no-color -auto-approve changes.tfplan
      else
        echo "Skipping apply step (Dry-run mode enabled)"
      fi
# [END tf-apply]

timeout: 5400s
options:
  logging: CLOUD_LOGGING_ONLY
