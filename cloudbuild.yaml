steps:
# [START project-init]
- id: 'Project Init'
  name: gcr.io/cloud-builders/gcloud
  entrypoint: sh
  args:
    - '-c'
    - |
      echo "***********************"
      echo "Project ID        : $_PROJECT_ID"
      echo "Region            : $_REGION"
      echo "Branch            : $_BRANCH_NAME"
      echo "Dry Run           : ${_APPLY_CHANGES}"
      echo "Subfolder         : ${_SUBFOLDER}"
      echo "Docker Folders    : ${_DOCKER_FOLDERS}"
      echo "Artifact Registry : ${_ARTIFACT_REGISTRY}"
      echo "Context           : ${_CONTEXT}"
      echo "***********************"
      chmod +x ./scripts/init.sh
      ./scripts/init.sh ${_PROJECT_ID} ${_SUBFOLDER}
# [END project-init]

# [START docker-build-push]
- id: 'Docker Build and Push'
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      if [ "${_DOCKER_FOLDERS}" != "" ]; then
        echo "Building and pushing Docker images..."
        # Loop through the comma-separated list of folders
        for folder in $(echo ${_DOCKER_FOLDERS} | tr "," "\n"); do
          if [ -d "$folder" ]; then
            echo "Building Docker image for $folder..."
            cd $folder
            docker build -t $_REGION-docker.pkg.dev/$_PROJECT_ID/$_ARTIFACT_REGISTRY/$_CONTEXT:$_COMMIT_SHA .
            docker push $_REGION-docker.pkg.dev/$_PROJECT_ID/$_ARTIFACT_REGISTRY/$_CONTEXT:$_COMMIT_SHA
          else
            echo "Folder $folder does not exist or does not contain Dockerfile"
          fi
        done
      else
        echo "Skipping Docker build and push (No Docker folders specified)"
      fi
# [END docker-build-push]

# [START tf-init]
- id: 'Terraform Init'
  name: 'hashicorp/terraform:1.8.0'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      cd $_SUBFOLDER
      terraform init -input=false -no-color -upgrade -backend-config=init/backend.tfvars
# [END tf-init]

# [START tf-plan]
- id: 'Terraform Plan'
  name: 'hashicorp/terraform:1.8.0'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      cd $_SUBFOLDER
      terraform plan -out changes.tfplan -var-file=config/variable.tfvars -var="image_tag_suffix=${_COMMIT_SHA}"
# [END tf-plan]

# [START tf-apply]
- id: 'Terraform Apply'
  name: 'hashicorp/terraform:1.8.0'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      if [ "${_APPLY_CHANGES}" == "true" ]; then
        cd $_SUBFOLDER
        echo "***********************"
        echo "Applying Terraform changes..."
        terraform apply -input=false -no-color -auto-approve changes.tfplan
      else
        echo "Skipping apply step (Dry-run mode enabled)"
      fi
# [END tf-apply]

timeout: 5400s
options:
  logging: CLOUD_LOGGING_ONLY
